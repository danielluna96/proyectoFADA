/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import proyectofinalfada.Algoritmo;
import clases.Actividad;
import clases.Robot;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;


/**
 *
 * @author danie
 */
public class VentanaAlgoritmos extends javax.swing.JFrame {
    private Thread thread1, thread2, thread3, thread4, thread5, thread6;
    private final Algoritmo algoritmos = new Algoritmo();
    private List<Actividad> listacargadaActividades = new ArrayList<Actividad>();
    public VentanaAlgoritmos() throws Exception {
        initComponents();
        setup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListEntrada = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListEntradaOrdenada = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListAlgoritmo1Problema1Variante = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListAlgoritmo2Problema1 = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListAlgoritmo3Problema1 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jListAlgoritmo1Problema1 = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        lblAlgoritmo1Problema1 = new javax.swing.JLabel();
        lblEntradaOrdenadaTime = new javax.swing.JLabel();
        lblAlgoritmo1Problema1Variante = new javax.swing.JLabel();
        lblAlgoritmo2Problema1 = new javax.swing.JLabel();
        lblAlgoritmo3Problema1 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jListAlgoritmo1Problema2 = new javax.swing.JList<>();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jListAlgoritmo2Problema2 = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        lblAlgoritmo1Problema2 = new javax.swing.JLabel();
        lblAlgoritmo2Problema2 = new javax.swing.JLabel();
        lblCantidadActividades = new javax.swing.JLabel();
        seleccionarEntradaButton = new javax.swing.JButton();
        generarEntradaButton = new javax.swing.JButton();
        jSpinnerCantidadActividades = new javax.swing.JSpinner();
        correrAlgoritmosButton = new javax.swing.JButton();
        guardarEntradaButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        stopThreadsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ProyectoLunaDiazCortezPerez");
        setIconImages(null);
        setPreferredSize(new java.awt.Dimension(1110, 740));

        jListEntrada.setEnabled(false);
        jListEntrada.setSelectionBackground(new java.awt.Color(238, 238, 238));
        jScrollPane1.setViewportView(jListEntrada);

        jLabel1.setText("Lista de Entradas Cargadas");

        jListEntradaOrdenada.setEnabled(false);
        jListEntradaOrdenada.setSelectionBackground(new java.awt.Color(238, 238, 238));
        jScrollPane2.setViewportView(jListEntradaOrdenada);

        jListAlgoritmo1Problema1Variante.setEnabled(false);
        jListAlgoritmo1Problema1Variante.setSelectionBackground(new java.awt.Color(238, 238, 238));
        jScrollPane3.setViewportView(jListAlgoritmo1Problema1Variante);

        jListAlgoritmo2Problema1.setEnabled(false);
        jListAlgoritmo2Problema1.setSelectionBackground(new java.awt.Color(238, 238, 238));
        jScrollPane4.setViewportView(jListAlgoritmo2Problema1);

        jListAlgoritmo3Problema1.setEnabled(false);
        jListAlgoritmo3Problema1.setSelectionBackground(new java.awt.Color(238, 238, 238));
        jScrollPane5.setViewportView(jListAlgoritmo3Problema1);

        jLabel2.setText("Entrada Organizada");

        jLabel3.setText("Algoritmo 1 Problema 1 Variante");

        jLabel4.setText("Algoritmo 2 Problema 1");

        jLabel5.setText("Algoritmo 3 Problema 1");

        jListAlgoritmo1Problema1.setEnabled(false);
        jListAlgoritmo1Problema1.setSelectionBackground(new java.awt.Color(238, 238, 238));
        jScrollPane6.setViewportView(jListAlgoritmo1Problema1);

        jLabel6.setText("Algoritmo 1 Problema 1");

        lblAlgoritmo1Problema1.setText("Time(ms): ");

        lblEntradaOrdenadaTime.setText("Time(ms): ");

        lblAlgoritmo1Problema1Variante.setText("Time(ms): ");

        lblAlgoritmo2Problema1.setText("Time(ms): ");

        lblAlgoritmo3Problema1.setText("Time(ms): ");

        jListAlgoritmo1Problema2.setEnabled(false);
        jListAlgoritmo1Problema2.setSelectionBackground(new java.awt.Color(238, 238, 238));
        jScrollPane7.setViewportView(jListAlgoritmo1Problema2);

        jLabel7.setText("Algoritmo 1 Problema 2");

        jListAlgoritmo2Problema2.setEnabled(false);
        jListAlgoritmo2Problema2.setSelectionBackground(new java.awt.Color(238, 238, 238));
        jScrollPane8.setViewportView(jListAlgoritmo2Problema2);

        jLabel8.setText("Algoritmo 2 Problema 2");

        lblAlgoritmo1Problema2.setText("Time(ms): ");

        lblAlgoritmo2Problema2.setText("Time(ms): ");

        lblCantidadActividades.setText("Cantidad Actividades: ");

        seleccionarEntradaButton.setText("Seleccionar Archivo Entrada");
        seleccionarEntradaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarEntradaButtonActionPerformed(evt);
            }
        });

        generarEntradaButton.setText("Generar Actividades Aleatorias");
        generarEntradaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarEntradaButtonActionPerformed(evt);
            }
        });

        jSpinnerCantidadActividades.setModel(new javax.swing.SpinnerNumberModel(10, 1, null, 1));

        correrAlgoritmosButton.setText("Ejecutar Algoritmos");
        correrAlgoritmosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                correrAlgoritmosButtonActionPerformed(evt);
            }
        });

        guardarEntradaButton.setText("Guardar Entrada");
        guardarEntradaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarEntradaButtonActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("<html>Proyecto realizado por los estudiantes:<br />Daniel Fernando Luna 1727654 (Grupo 01)<br /> Mauricio Steban Díaz Hoyos 1728136 (Grupo 80)<br /> Guido Cortés Cabezas 1667900 (Grupo 80)<br /> Luis Miguel Pérez Coy 1530647 (Grupo 80)<br /> </html>");

        jLabel10.setText("Nota: Los resultados se guardan en la carpeta base.");

        stopThreadsButton.setText("Detener");
        stopThreadsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopThreadsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(generarEntradaButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinnerCantidadActividades, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6)
                            .addComponent(seleccionarEntradaButton)
                            .addComponent(guardarEntradaButton)
                            .addComponent(jLabel10)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(correrAlgoritmosButton)
                                .addGap(18, 18, 18)
                                .addComponent(stopThreadsButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblAlgoritmo1Problema1))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCantidadActividades)
                            .addComponent(lblAlgoritmo1Problema2)
                            .addComponent(lblAlgoritmo1Problema1Variante)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEntradaOrdenadaTime)
                            .addComponent(lblAlgoritmo2Problema2)
                            .addComponent(lblAlgoritmo2Problema1)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblAlgoritmo3Problema1))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEntradaOrdenadaTime)
                            .addComponent(lblCantidadActividades)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(seleccionarEntradaButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(generarEntradaButton)
                            .addComponent(jSpinnerCantidadActividades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(correrAlgoritmosButton)
                            .addComponent(stopThreadsButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guardarEntradaButton)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                .addComponent(jScrollPane4))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAlgoritmo2Problema1)
                            .addComponent(lblAlgoritmo1Problema1Variante)
                            .addComponent(lblAlgoritmo3Problema1))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)))
                    .addComponent(lblAlgoritmo1Problema1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(jScrollPane8))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAlgoritmo2Problema2)
                    .addComponent(lblAlgoritmo1Problema2))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void limpiarJList(){
        //jListEntrada.setModel(new DefaultListModel());
        jListEntradaOrdenada.setModel(new DefaultListModel());
        jListAlgoritmo1Problema1.setModel(new DefaultListModel());
        jListAlgoritmo1Problema1Variante.setModel(new DefaultListModel());
        jListAlgoritmo2Problema1.setModel(new DefaultListModel());
        jListAlgoritmo3Problema1.setModel(new DefaultListModel());
        jListAlgoritmo1Problema2.setModel(new DefaultListModel());
        jListAlgoritmo2Problema2.setModel(new DefaultListModel());jListAlgoritmo1Problema1.setModel(new DefaultListModel());
        lblAlgoritmo1Problema1.setText("Time(ms): ");
        lblAlgoritmo1Problema1Variante.setText("Time(ms): ");
        lblAlgoritmo2Problema1.setText("Time(ms): ");
        lblAlgoritmo3Problema1.setText("Time(ms): ");
        lblAlgoritmo1Problema2.setText("Time(ms): ");
        lblAlgoritmo2Problema2.setText("Time(ms): ");
    }
    
    private void generarEntradaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarEntradaButtonActionPerformed
        limpiarJList();
        try {
            listacargadaActividades = new ArrayList<Actividad>(algoritmos.generarActividades((Integer)jSpinnerCantidadActividades.getValue()));
            setJListEntrada(listacargadaActividades);
        } catch (Exception ex) {
            Logger.getLogger(VentanaAlgoritmos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_generarEntradaButtonActionPerformed

    private void seleccionarEntradaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarEntradaButtonActionPerformed
        limpiarJList();
        listacargadaActividades = new ArrayList<Actividad>(algoritmos.cargarEntrada(algoritmos.selectEntrada()));
        setJListEntrada(listacargadaActividades);
    }//GEN-LAST:event_seleccionarEntradaButtonActionPerformed

    private void correrAlgoritmosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_correrAlgoritmosButtonActionPerformed
        limpiarJList();
        try {
            correrAlgoritmos(listacargadaActividades);
        } catch (Exception ex) {
            Logger.getLogger(VentanaAlgoritmos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_correrAlgoritmosButtonActionPerformed

    private void guardarEntradaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarEntradaButtonActionPerformed
        algoritmos.guardarEntrada(algoritmos.selectSaveEntrada(), listacargadaActividades);
    }//GEN-LAST:event_guardarEntradaButtonActionPerformed

    private void stopThreadsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopThreadsButtonActionPerformed
        if(thread1 != null){
            thread1.stop();
            lblAlgoritmo1Problema1.setText("Tratando de detener");
        }
        if(thread2 != null){
            thread2.stop();
            lblAlgoritmo1Problema1Variante.setText("Tratando de detener");
        }
        if(thread3 != null){
            thread3.stop();
            lblAlgoritmo2Problema1.setText("Tratando de detener");
        }
        if(thread4 != null){
            thread4.stop();
            lblAlgoritmo3Problema1.setText("Tratando de detener");
        }
        if(thread5 != null){
            thread5.stop();
            lblAlgoritmo1Problema2.setText("Tratando de detener");
        }
        if(thread6 != null){
            thread6.stop();
            lblAlgoritmo2Problema2.setText("Tratando de detener");
        }  
    }//GEN-LAST:event_stopThreadsButtonActionPerformed

    private void setup() throws Exception{
        //listacargadaActividades = new ArrayList<Actividad>(algoritmos.cargarEntrada(algoritmos.selectEntrada()));
        /*setJListEntrada(listacargadaActividades);
        try {
            correrAlgoritmos(listacargadaActividades);
        } catch (Exception ex) {
            Logger.getLogger(VentanaAlgoritmos.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
    }
    
    private void correrAlgoritmos(List<Actividad> listacargadaActividades) throws Exception{
        
        Robot robotBase = new Robot(0, 0, new ArrayList<Actividad>());
        Robot robotOptimo = new Robot(0, 0, new ArrayList<Actividad>());
        
        //Variables para determinar el tiempo de ejecución
        long tiempoInicio, tiempoFin, tiempo;

        
        ///*  algoritmos Organizar Entrada
        tiempoInicio = System.currentTimeMillis(); 
        List<Actividad> listaActividadesOrganizadas = new ArrayList<Actividad>(algoritmos.organizarActividades(listacargadaActividades));
        tiempoFin = System.currentTimeMillis();
        tiempo = tiempoFin - tiempoInicio;
        setJListEntradaOrdenada(listaActividadesOrganizadas, tiempo);
        //*/

        ///*  Algoritmo 1 del Problema 1 Todas las posibles combinaciones Muy Costosa
        Runnable algoritmo1Problema1 = new Runnable(){
            @Override
            public void run(){
                long tiempoInicio, tiempoFin, tiempo;
                tiempoInicio = System.currentTimeMillis();
                Robot resultadoAlgoritmo1Problema1 = new Robot(robotOptimo);
                lblAlgoritmo1Problema1.setText("Calculando esto puede tardar");
                algoritmos.algoritmo1Problema1(new Robot(robotBase), new ArrayList<Actividad>(listaActividadesOrganizadas), false, resultadoAlgoritmo1Problema1);
                tiempoFin = System.currentTimeMillis();
                tiempo = tiempoFin - tiempoInicio;
                algoritmos.mostrar("Problema 1 Algoritmo 1: \n" + resultadoAlgoritmo1Problema1.toString() + "\nTiempo de ejecución en ms: " + tiempo + "\n-----------------------------");
                setJListAlgoritmo1Problema1(resultadoAlgoritmo1Problema1, tiempo);
                algoritmos.guardarProblema1("Algoritmo1", resultadoAlgoritmo1Problema1);    
            }
        };
        thread1 = new Thread(algoritmo1Problema1);
        thread1.start();       
        //*/
        
        ///*  Algoritmo 1 del Problema 1 Variante Todas las posibles combinaciones Muy Costosa
        Runnable algoritmo1Problema1Variante = new Runnable(){
            @Override
            public void run(){
                long tiempoInicio, tiempoFin, tiempo;
                tiempoInicio = System.currentTimeMillis(); 
                Robot resultadoAlgoritmo1Problema1Variante = new Robot(robotOptimo);
                lblAlgoritmo1Problema1Variante.setText("Calculando esto puede tardar");
                algoritmos.algoritmo1Problema1Variante(new Robot(robotBase), new ArrayList<Actividad>(listaActividadesOrganizadas), false, resultadoAlgoritmo1Problema1Variante);
                tiempoFin = System.currentTimeMillis();
                tiempo = tiempoFin - tiempoInicio;
                algoritmos.mostrar("Problema 1 Algoritmo 1 Variante: \n" + resultadoAlgoritmo1Problema1Variante.toString() + "\nTiempo de ejecución en ms: " + tiempo + "\n-----------------------------");
                setJListAlgoritmo1Problema1Variante(resultadoAlgoritmo1Problema1Variante, tiempo);
                algoritmos.guardarProblema1("Algoritmo1Variante", resultadoAlgoritmo1Problema1Variante);
            }
        };
        thread1 = new Thread(algoritmo1Problema1Variante);
        thread1.start();
        //*/
        
        ///* Algoritmo 2 del Problema 1 Solución Voraz
        tiempoInicio = System.currentTimeMillis(); 
        Robot resultadoAlgoritmo2Problema1 = new Robot(robotOptimo);
        algoritmos.algoritmo2Problema1(new Robot(robotBase), new ArrayList<Actividad>(listaActividadesOrganizadas), resultadoAlgoritmo2Problema1, algoritmos.convertirADate("00:00"));
        tiempoFin = System.currentTimeMillis();
        tiempo = tiempoFin - tiempoInicio;
        algoritmos.mostrar("Problema 1 Algoritmo 2: \n" + resultadoAlgoritmo2Problema1.toString() + "\nTiempo de ejecución en ms: " + tiempo + "\n-----------------------------");
        setJListAlgoritmo2Problema1(resultadoAlgoritmo2Problema1, tiempo);
        algoritmos.guardarProblema1("Algoritmo2", resultadoAlgoritmo2Problema1);
        //*/

        ///* Algoritmo 3 del Problema 1 Solución Voraz Que recorre de forma inversa
        tiempoInicio = System.currentTimeMillis(); 
        Robot resultadoAlgoritmo3Problema1 = new Robot(robotOptimo);
        algoritmos.algoritmo3Problema1(new Robot(robotBase), new ArrayList<Actividad>(listaActividadesOrganizadas), resultadoAlgoritmo3Problema1, algoritmos.convertirADate("24:00"));
        tiempoFin = System.currentTimeMillis();
        tiempo = tiempoFin - tiempoInicio;
        algoritmos.mostrar("Problema 1 Algoritmo 3: \n" + resultadoAlgoritmo3Problema1.toString() + "\nTiempo de ejecución en ms: " + tiempo + "\n-----------------------------");
        setJListAlgoritmo3Problema1(resultadoAlgoritmo3Problema1, tiempo);
        algoritmos.guardarProblema1("Algoritmo3", resultadoAlgoritmo3Problema1);
        //*/

        ///* Algoritmo 1 del Problema 2 Solución Voraz Que recorre de forma inversa
        tiempoInicio = System.currentTimeMillis(); 
        Robot resultadoAlgoritmo1Problema2 = new Robot(robotOptimo);
        algoritmos.algoritmo1Problema2(new Robot(robotBase), new ArrayList<Actividad>(listaActividadesOrganizadas), resultadoAlgoritmo1Problema2, algoritmos.convertirADate("00:00"));
        tiempoFin = System.currentTimeMillis();
        tiempo = tiempoFin - tiempoInicio;
        algoritmos.mostrar("Problema 2 Algoritmo 1: \n" + resultadoAlgoritmo1Problema2.toString() + "\nTiempo de ejecución en ms: " + tiempo + "\n-----------------------------");
        setJListAlgoritmo1Problema2(resultadoAlgoritmo1Problema2, tiempo);
        algoritmos.guardarProblema2("Algoritmo1", resultadoAlgoritmo1Problema2);
        //*/   
        
        ///* Algoritmo 2 del Problema 2 Solución Voraz Que recorre de forma inversa
        Runnable algoritmo2Problema2 = new Runnable(){
            @Override
            public void run(){
                long tiempoInicio, tiempoFin, tiempo;
                lblAlgoritmo2Problema2.setText("Calculando esto puede tardar");
                tiempoInicio = System.currentTimeMillis(); 
                Robot resultadoAlgoritmo2Problema2 = new Robot(robotOptimo);
                algoritmos.algoritmo2Problema2(new Robot(robotBase), new ArrayList<Actividad>(listaActividadesOrganizadas), false, resultadoAlgoritmo2Problema2);
                tiempoFin = System.currentTimeMillis();
                tiempo = tiempoFin - tiempoInicio;
                algoritmos.mostrar("Problema 2 Algoritmo 2: \n" + resultadoAlgoritmo2Problema2.toString() + "\nTiempo de ejecución en ms: " + tiempo + "\n-----------------------------");
                setJListAlgoritmo2Problema2(resultadoAlgoritmo2Problema2, tiempo);
                algoritmos.guardarProblema2("Algoritmo2", resultadoAlgoritmo2Problema2);
            }
        };
        thread1 = new Thread(algoritmo2Problema2);
        thread1.start();
        //*/
    }
    
    public void setJListEntrada(List<Actividad> lista){
       DefaultListModel dlm = new DefaultListModel();
       lista.forEach(actividad -> {
           dlm.addElement(actividad);
        });
       jListEntrada.setModel(dlm);
       lblCantidadActividades.setText("Cantidad actividades: " + lista.size());
    }
    
    public void setJListEntradaOrdenada(List<Actividad> lista, long time){
       DefaultListModel dlm = new DefaultListModel();
       lista.forEach(actividad -> {
           dlm.addElement(actividad);
        });
       jListEntradaOrdenada.setModel(dlm);
       lblEntradaOrdenadaTime.setText("Tiempo(ms): " + Long.toString(time));
    }
    
    public void setJListAlgoritmo1Problema1(Robot robot, long time){
       DefaultListModel dlm = new DefaultListModel();
       robot.getActividades().forEach(actividad -> {
           dlm.addElement(actividad);
        });
       jListAlgoritmo1Problema1.setModel(dlm);
       lblAlgoritmo1Problema1.setText("<html>Tiempo(ms): " + Long.toString(time) + "<br/>Horas total: " + robot.getHorasTotal() + "</html>");
    }
    
    public void setJListAlgoritmo1Problema1Variante(Robot robot, long time){
       DefaultListModel dlm = new DefaultListModel();
       robot.getActividades().forEach(actividad -> {
           dlm.addElement(actividad);
        });
       jListAlgoritmo1Problema1Variante.setModel(dlm);
       lblAlgoritmo1Problema1Variante.setText("<html>Tiempo(ms): " + Long.toString(time) + "<br/>Horas total: " + robot.getHorasTotal() + "</html>");
    }
    
    public void setJListAlgoritmo2Problema1(Robot robot, long time){
       DefaultListModel dlm = new DefaultListModel();
       robot.getActividades().forEach(actividad -> {
           dlm.addElement(actividad);
        });
       jListAlgoritmo2Problema1.setModel(dlm);
       lblAlgoritmo2Problema1.setText("<html>Tiempo(ms): " + Long.toString(time) + "<br/>Horas total: " + robot.getHorasTotal() + "</html>");
    }
    
    public void setJListAlgoritmo3Problema1(Robot robot, long time){
       DefaultListModel dlm = new DefaultListModel();
       robot.getActividades().forEach(actividad -> {
           dlm.addElement(actividad);
        });
       jListAlgoritmo3Problema1.setModel(dlm);
       lblAlgoritmo3Problema1.setText("<html>Tiempo(ms): " + Long.toString(time) + "<br/>Horas total: " + robot.getHorasTotal() + "</html>");
    }
    
    public void setJListAlgoritmo1Problema2(Robot robot, long time){
       DefaultListModel dlm = new DefaultListModel();
       robot.getActividades().forEach(actividad -> {
           dlm.addElement(actividad);
        });
       jListAlgoritmo1Problema2.setModel(dlm);
       lblAlgoritmo1Problema2.setText("<html>Tiempo(ms): " + Long.toString(time) + "<br/>Cantidad actividades: " + robot.getCantidadActividades()+ "<br/>Horas total: " + robot.getHorasTotal() + "</html>");
    }
    
    public void setJListAlgoritmo2Problema2(Robot robot, long time){
       DefaultListModel dlm = new DefaultListModel();
       robot.getActividades().forEach(actividad -> {
           dlm.addElement(actividad);
        });
       jListAlgoritmo2Problema2.setModel(dlm);
       lblAlgoritmo2Problema2.setText("<html>Tiempo(ms): " + Long.toString(time) + "<br/>Cantidad actividades: " + robot.getCantidadActividades()+ "<br/>Horas total: " + robot.getHorasTotal() + "</html>");
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaAlgoritmos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaAlgoritmos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaAlgoritmos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaAlgoritmos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new VentanaAlgoritmos().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(VentanaAlgoritmos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton correrAlgoritmosButton;
    private javax.swing.JButton generarEntradaButton;
    private javax.swing.JButton guardarEntradaButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jListAlgoritmo1Problema1;
    private javax.swing.JList<String> jListAlgoritmo1Problema1Variante;
    private javax.swing.JList<String> jListAlgoritmo1Problema2;
    private javax.swing.JList<String> jListAlgoritmo2Problema1;
    private javax.swing.JList<String> jListAlgoritmo2Problema2;
    private javax.swing.JList<String> jListAlgoritmo3Problema1;
    private javax.swing.JList<String> jListEntrada;
    private javax.swing.JList<String> jListEntradaOrdenada;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSpinner jSpinnerCantidadActividades;
    private javax.swing.JLabel lblAlgoritmo1Problema1;
    private javax.swing.JLabel lblAlgoritmo1Problema1Variante;
    private javax.swing.JLabel lblAlgoritmo1Problema2;
    private javax.swing.JLabel lblAlgoritmo2Problema1;
    private javax.swing.JLabel lblAlgoritmo2Problema2;
    private javax.swing.JLabel lblAlgoritmo3Problema1;
    private javax.swing.JLabel lblCantidadActividades;
    private javax.swing.JLabel lblEntradaOrdenadaTime;
    private javax.swing.JButton seleccionarEntradaButton;
    private javax.swing.JButton stopThreadsButton;
    // End of variables declaration//GEN-END:variables
}
